.. _eth-contract:

========
web3.eth.contract
========

The ``web3.eth.contract`` object makes it easy to interact with smart contracts on the ethereum blockchain.
When you create a new contract object you give it the json interface of the respective smart contract
and web3 will auto convert all calls into low level ABI calls over RPC for you.

This allows you to interact with smart contracts as if they were JavaScript objects.


------------------------------------------------------------------------------


new contract
=========

.. index:: JSON interface

.. code-block:: javascript

    new web3.eth.contract(jsonInterface[, address][, options])

Creates a new contract instance with all its methods and events defined in its :ref:`json interface <glossary-json-interface>` object.

----------
Parameters
----------

1. ``Object`` - **jsonInterface**: The json interface for the contract to instantiate
2. ``String`` - **address** (optional): The address of the smart contract to call, can be added later using ``myContract.options.address = '0x1234..'``
3. ``Object`` - **options** (optional): The options of the contract. Some are used as fallbacks for calls and transactions:
    * ``String`` - **from**: The address transactions should be made from.
    * ``String`` - **gasPrice**: The gas price in wei to use for transactions.
    * ``Number`` - **gas**: The maximum gas provided for a transaction (gas limit).
    * ``String`` - **data**: The byte code of the contract. Used when the contract gets :ref:`deployed <contract-deploy>`.

-------
Returns
-------

``Object``: The contract instance with all its methods and events.


-------
Example
-------

.. code-block:: javascript

    var myContract = new web3.eth.contract([...], '0x1234567890123456789012345678901234567891', {
        from: '0x1234567890123456789012345678901234567891' // default from address
        gasPrice: '20000000000000' // default gas price in wei
    });


------------------------------------------------------------------------------


Contract Properties
=========


------------------------------------------------------------------------------

options
=========

.. code-block:: javascript

    myContract.options

The options ``object`` for the contract instance. ``from``, ``gas`` and ``gasPrice`` are used as fallback values when sending transactions.

-------
Properties
-------

``Object`` - options:

- ``String`` - **address**: The address where the contract is deployed. See :ref:`options.address <contract-address>`.
- ``Array`` - **jsonInterface**: The json interface of the contract. See :ref:`options.jsonInterface <contract-json-interface>`.
- ``String`` - **data**: The byte code of the contract. Used when the contract gets :ref:`deployed <contract-deploy>`.
- ``String`` - **from**: The address transactions should be made from.
- ``String`` - **gasPrice**: The gas price in wei to use for transactions.
- ``Number`` - **gas**: The maximum gas provided for a transaction (gas limit).


-------
Example
-------

.. code-block:: javascript

    myContract.options;
    > {
        address: '0x1234567890123456789012345678901234567891',
        jsonInterface: [...],
        from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe',
        gasPrice: '10000000000000',
        gas: 1000000
    }

    myContract.options.from = '0x1234567890123456789012345678901234567891'; // default from address
    myContract.options.gasPrice = '20000000000000'; // default gas price in wei
    myContract.options.gas = 5000000; // provide as fallback always 5M gas


------------------------------------------------------------------------------

.. _contract-address:

options.address
=========

.. code-block:: javascript

    myContract.options.address

The address used for this contract instance.
All transactions generated by web3.js from this contract will contain this address as the "to".

The address will be stored in lowercase.


-------
Property
-------

``String|null`` - address: The address for this contract, or ``null`` if its not yet set.


-------
Example
-------

.. code-block:: javascript

    myContract.options.address;
    > '0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae'

    // ste a new address
    myContract.options.address = '0x1234FFDD...';


------------------------------------------------------------------------------

.. _contract-json-interface:

options.jsonInterface
=========

.. code-block:: javascript

    myContract.options.jsonInterface

The :ref:`json interface <glossary-json-interface>` object derived from the `ABI <https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI>`_ of this contract.


-------
Property
-------

``Array`` - jsonInterface: The :ref:`json interface <glossary-json-interface>` for this contract. Re-setting this will regenerate the methods and events of the contract instance.


-------
Example
-------

.. code-block:: javascript

    myContract.options.jsonInterface;
    > [{
        "type":"function",
        "name":"foo",
        "inputs": [{"name":"a","type":"uint256"}],
        "outputs": [{"name":"b","type":"address"}]
    },{
        "type":"event",
        "name":"Event"
        "inputs": [{"name":"a","type":"uint256","indexed":true},{"name":"b","type":"bytes32","indexed":false}],
    }]

    // set a new interface
    myContract.options.jsonInterface = [...];


------------------------------------------------------------------------------


Contract Methods
=========


------------------------------------------------------------------------------


.. _contract-deploy:

.. index:: contract deploy

deploy
=====================

.. code-block:: javascript

    myContract.deploy(options, callback)

Call this function to deploy the contract to the blockchain.
After successfull deployment the ``myContract.options.address`` will be set automatically to the newly deployed contract.

----------
Parameters
----------

1. ``Object`` - **options**: The options used for deployemnt.
    * ``Array``` - **arguments**: The arguments which get passed to the constructor on deployment.
    * ``String`` - **data**: The byte code of the contract.
    * ``String`` - **from**: The address transactions should be made from.
    * ``String`` - **gasPrice**: The gas price in wei to use for transactions.
    * ``Number`` - **gas**: The maximum gas provided for a transaction (gas limit).
2. ``Function`` - **callbackj**: This callback will be fired when the transaction receipt is available. If the contract couldn't be deployed, the first argument will be an error object.

-------
Returns
-------

``PromiEvent``: A promise combined event emitter. Will be resolved when the transaction *receipt* is available. Additionally the following events are available:
    * ``transactionHash``: is fired right after the transaction is send and a transaction hash is available.
    * ``receipt``: is fired when the transaction receipt with the contract address is available.
    * ``error``: is fired if an error occurs during deployment.

-------
Example
-------

.. code-block:: javascript

    myContract.deploy({
        data: '0x12345...',
        arguments: [123, 'My String'],
        from: '0x1234567890123456789012345678901234567891',
        gas: 1500000,
        gasPrice: '30000000000000'
    })
    .on('error', function(error){ ... })
    .on('transactionHash', function(hash){ ... })
    .on('receipt', function(receipt){
        // same as when the promise gets resolved, see below
    })
    .then(function(receipt){
        console.log(myContract.options.address) // gives the new contract address
    });


------------------------------------------------------------------------------
